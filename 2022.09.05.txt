## 一、https SSL握手协议

### 1.握手过程

- ClientHello：客户端发送<u>TLS版本、客户端的随机数（使用公钥加密）、客户端支持的密码算法套件</u>（cipher suite）
- ServerHello：服务器从客户端支持的算法列表中选择一种对称算法（例如AES）、一种公钥算法（如RSA）、一种MAC（报文鉴别码）算法，把<u>算法选择、TLS版本确认、证书、服务器随机数</u>返回给客户端
- 客户端验证该证书，无误后提取证书中的服务器公钥，用该公钥加密生成的<u>前主秘钥</u>，并将该秘钥发送给服务器，服务器用自己的私钥解密即可得到前主密钥
- 自此服务器和客户端都有了生成<u>会话秘钥</u>（也称为主密钥）的三个重要数据：<u>前主密钥、客户端随机数、服务器随机数</u>。利用这三个数据，客户端和服务器都生成相应会话秘钥，此秘钥用于之后的http消息对话

- 客户端和服务器互相确认之后的通信都使用会话秘钥加密的通信，之后SSL握手结束

### 2.证书验证

证书是由世界可信赖的证书认证中心（CA）签署的，签署过程：

- CA将证书上的信息（比如公钥、用途、有效期等等）打包使用哈希算法得到散列值
- CA使用自己的私钥对散列值加密生成证书签名（certificate signature）
- 最后将签名附在证书上面，得到数字证书

客户端验证数字证书的过程：

- 客户端同样使用哈希算法计算证书信息得到散列值1，同时使用CA公钥（这个公钥一般是浏览器或者操作系统内置的）解密得到散列值2，将两个散列值进行对比，相同则证书可信，反之不可

注：上述验证过程用于根证书的验证下级证书的过程，例如三级证书。最开始只信任根证书，利用内置的根证书公钥验证中间证书的可信度；中间证书得到信任之后，利用中间证书的公钥验证三级证书

### 3.DH算法

RSA算法的缺陷：不支持前向保密（客户端的随机数使用公钥加密，服务器使用私钥解密，一旦私钥泄漏，以前被截获的报文都将被破解）。因此产生了DH算法，其大致过程：

- 服务器再收到第一次握手时产生一对公私钥，并将公钥发送给客户端
- 客户端收到之后也生成一对公私钥，将公钥发送给服务器端
- 现在双方都有自己的私钥和对方的公钥，并以此算出一个随机数，这个值双方都是一样的，作为后续对称加密的秘钥