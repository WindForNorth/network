## 一、http/1.0/1.1/2/3的演变

1.http1.1相比于1.0的性能优化

- 使⽤ TCP ⻓连接的⽅式改善了 HTTP/1.0 短连接造成的性能开销
- ⽀持管道（pipeline）⽹络传输，只要第⼀个请求发出去了，不必等其回来，就可以发第⼆个请求出去，可以 减少整体的响应时间。

2.http1.1的性能瓶颈

- 请求 / 响应头部（Header）未经压缩就发送，⾸部信息越多延迟越⼤。只能压缩 Body 的部分； 
- 发送冗⻓的⾸部。每次互相发送相同的⾸部造成的浪费较多； 
- 服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端⼀直请求不到数据，也就是队头阻塞； 
- 没有请求优先级控制；
-  请求只能从客户端开始，服务器只能被动响应

3.http2的优化

- 基于HTTPS，安全有保证
- 头部压缩：对于多条具有相似头部的信息，头部重复部分会被消除。使用hpack算法：客户端服务器同时维护一张头部信息表，使用索引代替头部信息
- 二进制格式：对比1.1的纯文本格式，2采用二进制格式，报文直接解析成二进制，减少了将文本转换为二进制的开销
- 2的数据包并不一定是按照请求顺序发送的，需要做标记，指出属于哪一个请求的回应（客户端发出的数据流编号为奇数，服务器为偶数）；可自定义优先级，优先级高的请求会得到优先回应
- 多路复用：一个连接可以同时并发多个请求，解决了对头阻塞
- 服务器推送：服务器不再是被动响应，可以主动向客户端发送信息。当客户正在浏览主页时，可提前将js、css等静态资源发送到客户端，减少等待时延

4.http2的问题

一个tcp连接可同时并发地处理多个请求，下层tcp协议并不知道存在多少请求，因此当一个请求发生丢包，其余所有请求都得被迫等待丢失的包被重传回来

5.http3的优化

- 针对2的问题，下层的传输层协议被改为了UDP，但是基于UDP实现了可靠传输，当发生丢包时，只会阻塞丢包的流，其他的流不会被阻塞
- TLS3 升级成了最新的 1.3 版本，头部压缩算法也升级成了 QPack 。 
- HTTPS 要建⽴⼀个连接，要花费 6 次交互，先是建⽴三次握⼿，然后是 TLS/1.3 的三次握⼿。QUIC 直接 把以往的 TCP 和 TLS/1.3 的 6 次交互合并成了 3 次，减少了交互次数。

## 2.http1.1如何优化？

主要思路如下：

- 短链接改为长连接
- 避免发送http请求：缓存技术
- 减少请求的次数：减少重定向请求次数、合并请求、延迟请求发送
- 减少服务器相应数据的大小：有损压缩和无损压缩

以下做具体阐释：

- 缓存：为了加快访问速度，将【请求-应答】作为【key-value】存储在本地，并设置一个过期时间，当访问的请求在本地且未过期时就直接读取本地数据；当过期了，也不着急直接请求完整数据，因为即使预计的过期时间过了，仍有可能服务器的内容时没有变化的，因此，当发现本地数据过期的时候，会向服务器发送一个带有本地数据摘要的请求，对比服务器数据的摘要，当两者没有差别的时候，服务器不用返回数据，返回304Not Modified即可；只有当摘要不一致确实已经改变时才会发送新的数据
- 减少重定向次数：存在代理服务器时，负责与客户端交互的是代理服务器，利用代理服务器与源服务器之间进行交互减少重定向次数
- 合并请求：将多个小资源合并为一个大资源作为一次发送，从而减少请求发送的次数
- 延迟发送请求：对于当前页面不需要的资源，没必要立即发送请求，减少第一时间的http请求次数，比如当用户向下翻的时候再请求下一页的资源
- 有损、无损压缩：有损压缩指解压的数据与原始的数据不同但是非常接近，对于一些图片音视频等文件连续帧之间的变化很小，因此可采用有损压缩；无损压缩解压后与原始数据是一样的，适合于传输文字报文